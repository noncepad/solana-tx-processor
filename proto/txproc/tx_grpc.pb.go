// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package txproc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TransactionProcessingClient is the client API for TransactionProcessing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionProcessingClient interface {
	Broadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*TransactionResult, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (TransactionProcessing_CreateClient, error)
	Upgrade(ctx context.Context, opts ...grpc.CallOption) (TransactionProcessing_UpgradeClient, error)
}

type transactionProcessingClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionProcessingClient(cc grpc.ClientConnInterface) TransactionProcessingClient {
	return &transactionProcessingClient{cc}
}

func (c *transactionProcessingClient) Broadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*TransactionResult, error) {
	out := new(TransactionResult)
	err := c.cc.Invoke(ctx, "/txproc.TransactionProcessing/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionProcessingClient) Create(ctx context.Context, opts ...grpc.CallOption) (TransactionProcessing_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TransactionProcessing_serviceDesc.Streams[0], "/txproc.TransactionProcessing/Create", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionProcessingCreateClient{stream}
	return x, nil
}

type TransactionProcessing_CreateClient interface {
	Send(*CreateProgramRequest) error
	Recv() (*ProgramResponse, error)
	grpc.ClientStream
}

type transactionProcessingCreateClient struct {
	grpc.ClientStream
}

func (x *transactionProcessingCreateClient) Send(m *CreateProgramRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transactionProcessingCreateClient) Recv() (*ProgramResponse, error) {
	m := new(ProgramResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionProcessingClient) Upgrade(ctx context.Context, opts ...grpc.CallOption) (TransactionProcessing_UpgradeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TransactionProcessing_serviceDesc.Streams[1], "/txproc.TransactionProcessing/Upgrade", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionProcessingUpgradeClient{stream}
	return x, nil
}

type TransactionProcessing_UpgradeClient interface {
	Send(*UpgradeProgramRequest) error
	Recv() (*ProgramResponse, error)
	grpc.ClientStream
}

type transactionProcessingUpgradeClient struct {
	grpc.ClientStream
}

func (x *transactionProcessingUpgradeClient) Send(m *UpgradeProgramRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transactionProcessingUpgradeClient) Recv() (*ProgramResponse, error) {
	m := new(ProgramResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransactionProcessingServer is the server API for TransactionProcessing service.
// All implementations must embed UnimplementedTransactionProcessingServer
// for forward compatibility
type TransactionProcessingServer interface {
	Broadcast(context.Context, *BroadcastRequest) (*TransactionResult, error)
	Create(TransactionProcessing_CreateServer) error
	Upgrade(TransactionProcessing_UpgradeServer) error
	mustEmbedUnimplementedTransactionProcessingServer()
}

// UnimplementedTransactionProcessingServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionProcessingServer struct {
}

func (UnimplementedTransactionProcessingServer) Broadcast(context.Context, *BroadcastRequest) (*TransactionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedTransactionProcessingServer) Create(TransactionProcessing_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTransactionProcessingServer) Upgrade(TransactionProcessing_UpgradeServer) error {
	return status.Errorf(codes.Unimplemented, "method Upgrade not implemented")
}
func (UnimplementedTransactionProcessingServer) mustEmbedUnimplementedTransactionProcessingServer() {}

// UnsafeTransactionProcessingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionProcessingServer will
// result in compilation errors.
type UnsafeTransactionProcessingServer interface {
	mustEmbedUnimplementedTransactionProcessingServer()
}

func RegisterTransactionProcessingServer(s *grpc.Server, srv TransactionProcessingServer) {
	s.RegisterService(&_TransactionProcessing_serviceDesc, srv)
}

func _TransactionProcessing_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionProcessingServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txproc.TransactionProcessing/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionProcessingServer).Broadcast(ctx, req.(*BroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionProcessing_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransactionProcessingServer).Create(&transactionProcessingCreateServer{stream})
}

type TransactionProcessing_CreateServer interface {
	Send(*ProgramResponse) error
	Recv() (*CreateProgramRequest, error)
	grpc.ServerStream
}

type transactionProcessingCreateServer struct {
	grpc.ServerStream
}

func (x *transactionProcessingCreateServer) Send(m *ProgramResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transactionProcessingCreateServer) Recv() (*CreateProgramRequest, error) {
	m := new(CreateProgramRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TransactionProcessing_Upgrade_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransactionProcessingServer).Upgrade(&transactionProcessingUpgradeServer{stream})
}

type TransactionProcessing_UpgradeServer interface {
	Send(*ProgramResponse) error
	Recv() (*UpgradeProgramRequest, error)
	grpc.ServerStream
}

type transactionProcessingUpgradeServer struct {
	grpc.ServerStream
}

func (x *transactionProcessingUpgradeServer) Send(m *ProgramResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transactionProcessingUpgradeServer) Recv() (*UpgradeProgramRequest, error) {
	m := new(UpgradeProgramRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TransactionProcessing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "txproc.TransactionProcessing",
	HandlerType: (*TransactionProcessingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Broadcast",
			Handler:    _TransactionProcessing_Broadcast_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Create",
			Handler:       _TransactionProcessing_Create_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Upgrade",
			Handler:       _TransactionProcessing_Upgrade_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tx.proto",
}
